package explain;

public class OOPTTest4 {
	
	
	public static void main(String[] args) {

		A a1 = new A();
		a1.test();
	}

}

/*

//하나라도 추상 메서드가 있으면 class에도 abstract를 붙인다
abstract class Test{
	
	abstract void func1();
	abstract void func2();
	abstract void func3();
	
	//모든 메서드가 추상 메서드 이다. -> 인터페이스라도 부른다
}

//인터페이스 사용 방법
interface TestInterface{
	void fucn1(); //{} ->abstract를 적을 필요X, 바디를 넣으면 에러가난다(abstract이기 때문에)
	void fucn2();
	void fucn3();
	
	//아무 쓸모도 없는데 왜 적어야 하나 의문?? -->
}


//인터페이스 : 사람과 티비가 있으면 사람이 티비 내부를 다 열어 티비를 키지 않고 리모컨 하나로 조작 하는것 처럼
//사람은 티비의 내부를 잘 몰라도 리모컨 조작법만 알면 사용 가능하다
//티비 만드는 사람 또한 리모컨을 생각하면서 만든다
//-> 유저인터페이스라고 부른다

//자바에서의 인터페이스
//코드를 짤때 여러 개발자가 기능1을 수행하기 위해 여러개의 클래스를 각각의 개발자가 만들때 class1, class2의 기능이 있는데
//class1이 만들때 사용하기 위해서 class2의 기능이 필요할 경우가 있다
//그러기 위해서는 class1을 만드는 개발자는 class2를 만드는 개발자에게 필요한 기능이 있는지 물어보고 받아 사용 해야 사용 가능하다
//그렇게 사용을 하다 class2의 개발자가 기능의 이름을 변경하면 class1은 사용 불가능 -> 이름을 마음데로 변경 불가
//따라서 특정 기능에 대한 약속을 하기 위해 class2의 개발자는 어떤기능을 하는 함수에 대한 정의를 내려 이러한 이름으로 사용해라 라는 정의를 해주고
//class1의 개발자가 그에 맞게 코드를 만들면 class2의 개발자가 구현은 따로 알아서 한다
//(특정 기능의 코드는 이름은 어떻게, 매개변수는 어떻게 하고.... 속성은 어떻게 만들어라를 미리 정의 해논다) -> 이기능은 개발자 뿐만 아니라 자바도 알아야 한다
// ==> class1, class2는 특정 인터페이스를 따른다는 것을 자바에게 알려 준다 

*/

//class A 에서는 class B의 기능을 갖어와 사용하는 코드이다.
class A {
//B가 제공하는 func1이라는 기능을 사용한다
	void test() {

		B b1 = new B();

		int rst = b1.func1();

		System.out.println(rst);
	}

}



//코드를 혼자 만드는 경우 사용할 필요가 없지만 A, B를 다른 개발자가 따로 만든다고 생각 했을 경우
//A 클래스 개발자는 B클래스의 기능 이름이 func1이라는 것을 알 수 없다
//B의 개발자가 아직 안만들었을 수도 있고 여러 상황이 있기 때문에 이름을 미리 정해 놓거나 알려준다
interface test {
	int func1();
} // ==> 두개의 관련이 없는 class가 인터페이스로 연결이 되었다.




//implements --> 인터페이스를 구현하겠다
class B implements test {
	//기능이 구현 가능 여부에 상괸 없이 func1()은 만들어 놓아야 한다. -> 인터페이를 따른다고 했기 때문에(준비 해옿아야 한다)
	public int func1() {
		return 3; //이기능은 개발자가 원하는 수에 따라 아무 숫자나 리턴 가능하다
	}


	
	//인터페이스가 사용 되는 유용한 경우!!!(특정 개발자가 특정 부분의 코드를 강제 할때..)
	//장점 --> 복잡한 로직이 있어 잘하는 사람이 코드를 짜주었는데 정작 원하는 방향으로 사용할 수 없다
	// -> 잘하는 사람이 어려운 부문만 짜고 정작 내가 구현을 하고 싶은 필요한 부분만 비워놓고 내가 직접 코드를 구현하여 넣을때 유용
	//그 비어 놓은 부분을 개발자가 이름과 특정 적인것만 정해놓는다(ex 이름 test) 그러니 나는 이 약속만 지켜 코드를 짜면 된다
}
